// This file is automatically generated - DO NOT EDIT MANUALLY!
using System.Collections.Generic;
using Unity.Labs.MARS.Data;

namespace Unity.Labs.MARS.Query
{
    partial class RelationRatingTransform
    {
        public static bool TryMatchAllInternal(Relations relations,
            RelationTraitCache traits,
            RelationRatingsData ratings,
            List<Dictionary<int, float>> memberRatings,
            RelationDataPair[] relationPairs)
        {
            if(relations.GetTypeCount(out IRelation<System.Int32>[] intRelations) > 0)
            {
                if(!traits.TryGetType(out List<RelationTraitCache.ChildTraits<System.Int32>> intTraits) ||
                    !RateMatches(intRelations, intTraits, relationPairs, memberRatings, ratings))
                    return false;
            }

            if(relations.GetTypeCount(out IRelation<System.Single>[] floatRelations) > 0)
            {
                if(!traits.TryGetType(out List<RelationTraitCache.ChildTraits<System.Single>> floatTraits) ||
                    !RateMatches(floatRelations, floatTraits, relationPairs, memberRatings, ratings))
                    return false;
            }

            if(relations.GetTypeCount(out IRelation<UnityEngine.Pose>[] poseRelations) > 0)
            {
                if(!traits.TryGetType(out List<RelationTraitCache.ChildTraits<UnityEngine.Pose>> poseTraits) ||
                    !RateMatches(poseRelations, poseTraits, relationPairs, memberRatings, ratings))
                    return false;
            }

            if(relations.GetTypeCount(out IRelation<UnityEngine.Vector2>[] vector2Relations) > 0)
            {
                if(!traits.TryGetType(out List<RelationTraitCache.ChildTraits<UnityEngine.Vector2>> vector2Traits) ||
                    !RateMatches(vector2Relations, vector2Traits, relationPairs, memberRatings, ratings))
                    return false;
            }

            return true;
        }
    }
}
